// test_rnn.cpp
// Test RNN module

#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <tt/device.h>
#include <tt/exception.h>
#include <tt/index.h>
#include <tt/nn/rnn.h>
#include <tt/scalar.h>
#include <tt/shape.h>
#include <tt/tensor.h>

#include "doctest.h"
#include "test_util.h"

#include <cmath>
#include <memory>
#include <vector>

using namespace tinytensor;

// NOLINTNEXTLINE
TEST_CASE("RNN shapes") {
    auto device = kCPU;
    const int L = 3;
    const int B = 5;
    const int input_size = 10;
    const int hidden_size = 4;
    {
        int num_layers = 2;
        nn::RNN rnn(input_size, hidden_size, nn::RNNOptions{.num_layers = num_layers}, kF64, device);
        Tensor x = uniform_real(0, 1, {L, input_size});
        Tensor h = uniform_real(0, 1, {num_layers, hidden_size});
        auto output = rnn.forward(x, h);
        CHECK_EQ(output.output.shape(), Shape{L, hidden_size});
        CHECK_EQ(output.h.shape(), Shape{num_layers, hidden_size});
    }
    {
        int num_layers = 2;
        nn::RNN
            rnn(input_size, hidden_size, nn::RNNOptions{.num_layers = num_layers, .bidirectional = true}, kF64, device);
        Tensor x = uniform_real(0, 1, {L, input_size});
        Tensor h = uniform_real(0, 1, {2 * num_layers, input_size});
        auto output = rnn.forward(x);
        CHECK_EQ(output.output.shape(), Shape{L, 2 * hidden_size});
        CHECK_EQ(output.h.shape(), Shape{2 * num_layers, hidden_size});
    }
    {
        int num_layers = 2;
        nn::RNN rnn(
            input_size,
            hidden_size,
            nn::RNNOptions{.num_layers = num_layers, .batch_first = true, .bidirectional = true},
            kF64,
            device
        );
        Tensor x = uniform_real(0, 1, {B, L, input_size});
        auto output = rnn.forward(x);
        CHECK_EQ(output.output.shape(), Shape{B, L, 2 * hidden_size});
        CHECK_EQ(output.h.shape(), Shape{2 * num_layers, B, hidden_size});
    }
}

// NOLINTNEXTLINE
TEST_CASE("RNN uni-directional") {
    auto device = kCPU;
    nn::RNN rnn(10, 4, nn::RNNOptions{.num_layers = 2}, kF64, device);
    Tensor w_ih_0(
        std::vector<double>{-0.4011936060, -0.1439633969, 0.0103228593,  0.3162082889,  -0.0507292643, 0.3865914478,
                            -0.4860564720, -0.1104001273, -0.2596578854, -0.4404822229, 0.2767844117,  -0.4337507701,
                            -0.2635836487, 0.1710699153,  0.1513931224,  0.4513485663,  -0.3792409101, -0.0963325327,
                            0.2338955627,  -0.3610250478, 0.0640590798,  -0.3549823441, 0.4019791904,  -0.0149001437,
                            0.1969217269,  0.1046239925,  -0.3749293397, 0.1257647218,  -0.2881944795, -0.0445056870,
                            -0.4703514283, -0.0401764084, -0.0116687639, -0.2990748157, 0.3972696924,  -0.2250065217,
                            0.2748419415,  0.1901360854,  -0.4436897001, 0.2095542680},
        {4, 10},
        device,
        true
    );
    Tensor w_ih_1(
        std::vector<double>{
            -0.2268733700,
            -0.2373433659,
            0.4507138596,
            -0.2869218942,
            0.3960073974,
            -0.3097784458,
            0.4753675275,
            -0.2575132710,
            -0.2426619956,
            -0.4129787708,
            0.1118727530,
            -0.4218066821,
            0.0718983406,
            -0.1952051112,
            0.0035397193,
            0.3700665657
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_0(
        std::vector<double>{
            -0.3443408849,
            0.0520476213,
            0.4897972329,
            -0.2638296789,
            0.3802194377,
            -0.4644350144,
            0.2788060899,
            -0.1031517226,
            -0.0168072454,
            -0.4205384770,
            0.2093582403,
            0.0458671190,
            -0.0129085498,
            -0.3498787612,
            0.0202599714,
            -0.0956926554
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_1(
        std::vector<double>{
            0.1200119091,
            -0.0255094310,
            0.0808951535,
            -0.4364099524,
            0.2912923406,
            0.1471684291,
            0.3210770788,
            -0.1693079311,
            0.4262533529,
            0.4674802088,
            -0.3366264863,
            0.3640011888,
            -0.2642256803,
            0.0054736975,
            -0.4560141091,
            -0.0711930591
        },
        {4, 4},
        device,
        true
    );
    Tensor b_ih_0(std::vector<double>{0.1584829727, -0.4872436952, 0.0608402194, 0.2507556631}, {4}, device, true);
    Tensor b_ih_1(std::vector<double>{-0.0475433634, 0.1507951253, 0.2369683859, 0.3754109632}, {4}, device, true);
    Tensor b_hh_0(std::vector<double>{0.4750800640, 0.1450134756, 0.1599416042, 0.1450729608}, {4}, device, true);
    Tensor b_hh_1(std::vector<double>{-0.4627501521, -0.4191543464, 0.3637423487, 0.1531468064}, {4}, device, true);
    rnn.weights_ih.clear();
    rnn.weights_ih.push_back(std::make_shared<Tensor>(w_ih_0.permute({1, 0})));
    rnn.weights_ih.push_back(std::make_shared<Tensor>(w_ih_1.permute({1, 0})));
    rnn.weights_hh.clear();
    rnn.weights_hh.push_back(std::make_shared<Tensor>(w_hh_0.permute({1, 0})));
    rnn.weights_hh.push_back(std::make_shared<Tensor>(w_hh_1.permute({1, 0})));
    rnn.biases_ih.clear();
    rnn.biases_ih.push_back(std::make_shared<Tensor>(b_ih_0));
    rnn.biases_ih.push_back(std::make_shared<Tensor>(b_ih_1));
    rnn.biases_hh.clear();
    rnn.biases_hh.push_back(std::make_shared<Tensor>(b_hh_0));
    rnn.biases_hh.push_back(std::make_shared<Tensor>(b_hh_1));
    Tensor x(
        std::vector<double>{
            0.40552099, 0.53272209, 0.37362827, 0.47835793, 0.62588921, 0.22680077, 0.98989827, 0.79317048, 0.52491096,
            0.52219429, 0.39511743, 0.39646217, 0.71928758, 0.53643917, 0.76351164, 0.42057593, 0.00275104, 0.70850611,
            0.56164295, 0.62800029, 0.95502570, 0.03247582, 0.49755528, 0.78658307, 0.69435999, 0.06371662, 0.17942021,
            0.40106260, 0.62920572, 0.78331607, 0.39146551, 0.95106855, 0.38190589, 0.79865087, 0.16467445, 0.85551767,
            0.51995575, 0.28778764, 0.06395404, 0.72306560, 0.83355451, 0.78362683, 0.19138122, 0.39985727, 0.49470455,
            0.50640585, 0.46992822, 0.17278670, 0.22393732, 0.46315068, 0.52167762, 0.55331183, 0.02867861, 0.97760802,
            0.39284889, 0.23998774, 0.22218402, 0.84290535, 0.06032607, 0.57941201, 0.61783610, 0.58698944, 0.32288694,
            0.52838999, 0.90528307, 0.51430005, 0.47301558, 0.86635738, 0.02015154, 0.25542170, 0.39032942, 0.74938017,
            0.60104747, 0.15862677, 0.69853356, 0.72138419, 0.39831749, 0.73881310, 0.54589457, 0.96416395, 0.97720520,
            0.20109011, 0.84477785, 0.02349001, 0.62334513, 0.48539447, 0.82661819, 0.52766115, 0.88651339, 0.51098889,
            0.44454778, 0.75536919, 0.99911529, 0.28720473, 0.38677424, 0.14373095, 0.62323554, 0.08063257, 0.31976749,
            0.72787893
        },
        {2, 5, 10},
        device
    );

    Tensor expected_output(
        std::vector<double>{-0.4340039502, -0.3462846061, 0.6261272589,  0.6725012793,  -0.3331368482, 0.0718226220,
                            0.5635202015,  0.6071900528,  -0.2581965895, -0.0931535890, 0.6451035731,  0.4992049145,
                            -0.4538436636, -0.0217049121, 0.6142863318,  0.6101381219,  -0.4163267963, -0.1822167837,
                            0.6266055389,  0.5660285204,  -0.5964299478, -0.1074139501, 0.2579695870,  0.4939995917,
                            -0.6263027617, -0.0591270708, 0.3091517004,  0.4991293510,  -0.5289513152, -0.0294939316,
                            0.4157959366,  0.5017049831,  -0.4791372587, -0.3888056325, 0.4712935433,  0.3732126130,
                            -0.4821155187, -0.1801698907, 0.4844075906,  0.5425546138},
        {2, 5, 4},
        device
    );
    Tensor expected_h(
        std::vector<double>{0.1521995420,  -0.3466545486, 0.3992850095,  0.4144532828,  0.2381221017,  -0.0605628651,
                            0.5133721024,  0.5420988470,  0.0479266566,  -0.5135314576, 0.3208110146,  0.4869471626,
                            -0.6118556290, -0.0466081443, 0.4152974202,  0.2723249774,  -0.2732753072, -0.7176041319,
                            0.2871193615,  0.4723318380,  -0.5964299478, -0.1074139501, 0.2579695870,  0.4939995917,
                            -0.6263027617, -0.0591270708, 0.3091517004,  0.4991293510,  -0.5289513152, -0.0294939316,
                            0.4157959366,  0.5017049831,  -0.4791372587, -0.3888056325, 0.4712935433,  0.3732126130,
                            -0.4821155187, -0.1801698907, 0.4844075906,  0.5425546138},
        {2, 5, 4},
        device
    );

    auto output = rnn.forward(x);
    CHECK(allclose(expected_output, output.output));
    CHECK(allclose(expected_h, output.h));
}

// NOLINTNEXTLINE
TEST_CASE("RNN uni-directional with h") {
    auto device = kCPU;
    nn::RNN rnn(10, 4, nn::RNNOptions{.num_layers = 2}, kF64, device);
    Tensor w_ih_0(
        std::vector<double>{-0.4011936060, -0.1439633969, 0.0103228593,  0.3162082889,  -0.0507292643, 0.3865914478,
                            -0.4860564720, -0.1104001273, -0.2596578854, -0.4404822229, 0.2767844117,  -0.4337507701,
                            -0.2635836487, 0.1710699153,  0.1513931224,  0.4513485663,  -0.3792409101, -0.0963325327,
                            0.2338955627,  -0.3610250478, 0.0640590798,  -0.3549823441, 0.4019791904,  -0.0149001437,
                            0.1969217269,  0.1046239925,  -0.3749293397, 0.1257647218,  -0.2881944795, -0.0445056870,
                            -0.4703514283, -0.0401764084, -0.0116687639, -0.2990748157, 0.3972696924,  -0.2250065217,
                            0.2748419415,  0.1901360854,  -0.4436897001, 0.2095542680},
        {4, 10},
        device,
        true
    );
    Tensor w_ih_1(
        std::vector<double>{
            -0.2268733700,
            -0.2373433659,
            0.4507138596,
            -0.2869218942,
            0.3960073974,
            -0.3097784458,
            0.4753675275,
            -0.2575132710,
            -0.2426619956,
            -0.4129787708,
            0.1118727530,
            -0.4218066821,
            0.0718983406,
            -0.1952051112,
            0.0035397193,
            0.3700665657
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_0(
        std::vector<double>{
            -0.3443408849,
            0.0520476213,
            0.4897972329,
            -0.2638296789,
            0.3802194377,
            -0.4644350144,
            0.2788060899,
            -0.1031517226,
            -0.0168072454,
            -0.4205384770,
            0.2093582403,
            0.0458671190,
            -0.0129085498,
            -0.3498787612,
            0.0202599714,
            -0.0956926554
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_1(
        std::vector<double>{
            0.1200119091,
            -0.0255094310,
            0.0808951535,
            -0.4364099524,
            0.2912923406,
            0.1471684291,
            0.3210770788,
            -0.1693079311,
            0.4262533529,
            0.4674802088,
            -0.3366264863,
            0.3640011888,
            -0.2642256803,
            0.0054736975,
            -0.4560141091,
            -0.0711930591
        },
        {4, 4},
        device,
        true
    );
    Tensor b_ih_0(std::vector<double>{0.1584829727, -0.4872436952, 0.0608402194, 0.2507556631}, {4}, device, true);
    Tensor b_ih_1(std::vector<double>{-0.0475433634, 0.1507951253, 0.2369683859, 0.3754109632}, {4}, device, true);
    Tensor b_hh_0(std::vector<double>{0.4750800640, 0.1450134756, 0.1599416042, 0.1450729608}, {4}, device, true);
    Tensor b_hh_1(std::vector<double>{-0.4627501521, -0.4191543464, 0.3637423487, 0.1531468064}, {4}, device, true);
    rnn.weights_ih.clear();
    rnn.weights_ih.push_back(std::make_shared<Tensor>(w_ih_0.permute({1, 0})));
    rnn.weights_ih.push_back(std::make_shared<Tensor>(w_ih_1.permute({1, 0})));
    rnn.weights_hh.clear();
    rnn.weights_hh.push_back(std::make_shared<Tensor>(w_hh_0.permute({1, 0})));
    rnn.weights_hh.push_back(std::make_shared<Tensor>(w_hh_1.permute({1, 0})));
    rnn.biases_ih.clear();
    rnn.biases_ih.push_back(std::make_shared<Tensor>(b_ih_0));
    rnn.biases_ih.push_back(std::make_shared<Tensor>(b_ih_1));
    rnn.biases_hh.clear();
    rnn.biases_hh.push_back(std::make_shared<Tensor>(b_hh_0));
    rnn.biases_hh.push_back(std::make_shared<Tensor>(b_hh_1));
    Tensor x(
        std::vector<double>{
            0.40552099, 0.53272209, 0.37362827, 0.47835793, 0.62588921, 0.22680077, 0.98989827, 0.79317048, 0.52491096,
            0.52219429, 0.39511743, 0.39646217, 0.71928758, 0.53643917, 0.76351164, 0.42057593, 0.00275104, 0.70850611,
            0.56164295, 0.62800029, 0.95502570, 0.03247582, 0.49755528, 0.78658307, 0.69435999, 0.06371662, 0.17942021,
            0.40106260, 0.62920572, 0.78331607, 0.39146551, 0.95106855, 0.38190589, 0.79865087, 0.16467445, 0.85551767,
            0.51995575, 0.28778764, 0.06395404, 0.72306560, 0.83355451, 0.78362683, 0.19138122, 0.39985727, 0.49470455,
            0.50640585, 0.46992822, 0.17278670, 0.22393732, 0.46315068, 0.52167762, 0.55331183, 0.02867861, 0.97760802,
            0.39284889, 0.23998774, 0.22218402, 0.84290535, 0.06032607, 0.57941201, 0.61783610, 0.58698944, 0.32288694,
            0.52838999, 0.90528307, 0.51430005, 0.47301558, 0.86635738, 0.02015154, 0.25542170, 0.39032942, 0.74938017,
            0.60104747, 0.15862677, 0.69853356, 0.72138419, 0.39831749, 0.73881310, 0.54589457, 0.96416395, 0.97720520,
            0.20109011, 0.84477785, 0.02349001, 0.62334513, 0.48539447, 0.82661819, 0.52766115, 0.88651339, 0.51098889,
            0.44454778, 0.75536919, 0.99911529, 0.28720473, 0.38677424, 0.14373095, 0.62323554, 0.08063257, 0.31976749,
            0.72787893
        },
        {2, 5, 10},
        device
    );
    Tensor h(
        std::vector<double>{0.9208544636, 0.8276618612, 0.0157640248, 0.5616042199, 0.9968794975, 0.9231708517,
                            0.4380110843, 0.2164765620, 0.8835307540, 0.2316758854, 0.5460353461, 0.1630694160,
                            0.8695429040, 0.3480203920, 0.4282042486, 0.9135698383, 0.2952407871, 0.6869566991,
                            0.2654546410, 0.3127791381, 0.4430911304, 0.9282794343, 0.9671643054, 0.6753766488,
                            0.4203802295, 0.1873547440, 0.7168576438, 0.1770891584, 0.5441351979, 0.3417888105,
                            0.8798428229, 0.9273130334, 0.0668192281, 0.9065310469, 0.9541089090, 0.6997259567,
                            0.9054803470, 0.9894392238, 0.2359323651, 0.9406171334},
        {2, 5, 4},
        device
    );

    Tensor expected_output(
        std::vector<double>{-0.5510984303, -0.0759536570, 0.8995768996,  0.0841820674,  -0.3133593857, 0.3040793421,
                            0.6942124445,  0.1084470488,  -0.5228243411, 0.1315274129,  0.8036676656,  -0.1698156371,
                            -0.5718506559, 0.1925874431,  0.8343743389,  0.0836292727,  -0.6286219533, 0.1373143775,
                            0.9634700218,  0.1560032841,  -0.4127541423, 0.1063628185,  0.0574500845,  0.4861894704,
                            -0.4770901312, 0.1082522062,  0.2391239037,  0.4970183241,  -0.3333809910, 0.1111438195,
                            0.1912736891,  0.5310381881,  -0.2900600838, -0.1810049495, 0.3292910459,  0.3731623510,
                            -0.3483792224, -0.0503063595, 0.2987760705,  0.5044561080},
        {2, 5, 4},
        device
    );
    Tensor expected_h(
        std::vector<double>{0.1871212769,  -0.4726380828, 0.3526431453,  0.4500576587,  0.2437419571,  -0.1713279393,
                            0.4447817023,  0.5514328206,  0.1181817637,  -0.6334817736, 0.1777827694,  0.3939224193,
                            -0.5068946046, -0.2113722727, 0.3553686802,  0.2479251087,  -0.3073648782, -0.7085477850,
                            0.2831042118,  0.5218114895,  -0.4127541423, 0.1063628185,  0.0574500845,  0.4861894704,
                            -0.4770901312, 0.1082522062,  0.2391239037,  0.4970183241,  -0.3333809910, 0.1111438195,
                            0.1912736891,  0.5310381881,  -0.2900600838, -0.1810049495, 0.3292910459,  0.3731623510,
                            -0.3483792224, -0.0503063595, 0.2987760705,  0.5044561080},
        {2, 5, 4},
        device
    );

    auto output = rnn.forward(x, h);
    CHECK(allclose(expected_output, output.output));
    CHECK(allclose(expected_h, output.h));
}

// NOLINTNEXTLINE
TEST_CASE("RNN bi-directional") {
    auto device = kCPU;
    nn::RNN rnn(10, 4, nn::RNNOptions{.num_layers = 2, .bidirectional = true}, kF64, device);
    Tensor w_ih_0(
        std::vector<double>{0.2329055521,  0.1385271375,  0.1739182314,  -0.2463679655, 0.1201485425,  0.3036600564,
                            -0.1921666453, -0.3823227190, 0.4578479868,  -0.2659382563, -0.0505037927, 0.0180241323,
                            0.3892397867,  -0.2403168133, 0.3205397487,  -0.3652554977, -0.2527349620, -0.0371784752,
                            0.4475868821,  0.0994418394,  -0.2992987233, -0.1216039203, -0.1796349765, 0.1995802977,
                            -0.4893613836, 0.4605807993,  0.0567435748,  0.1348023968,  0.1717753976,  0.1933466090,
                            -0.1245779106, -0.4393322712, -0.0912990969, 0.3996011390,  -0.0282922984, -0.2865738566,
                            -0.2672411763, -0.3871641648, 0.4655371815,  0.3192253362},
        {4, 10},
        device,
        true
    );
    Tensor w_ih_1(
        std::vector<double>{0.0901339176,  0.4980541693,  -0.1787826875, 0.0043235029,  -0.3165460397, -0.1785445500,
                            0.1311115367,  0.2893470097,  0.4119732704,  0.3046222266,  0.3150042954,  -0.3691563680,
                            0.3169833892,  -0.3715657210, 0.2676343139,  0.3892615515,  -0.1727169287, -0.3705768595,
                            -0.4501447362, 0.2680503231,  0.2666701416,  -0.4732410850, -0.2730544930, 0.2004064468,
                            -0.0598230706, 0.2941175768,  0.0623738879,  0.4900391792,  -0.3618247781, 0.0526216445,
                            -0.2104056942, -0.1353844908},
        {4, 8},
        device,
        true
    );
    Tensor w_ih_0_reverse(
        std::vector<double>{-0.4379018204, 0.1140894100,  0.3528108215,  0.4653498052,  -0.4315241963, 0.3633583847,
                            0.1486655801,  -0.1172123769, 0.3334543345,  -0.0047963940, -0.3254784924, 0.4851521970,
                            0.3807434936,  -0.3679993093, -0.0725587543, -0.1312914063, 0.2223324993,  -0.4226386116,
                            -0.1898967552, -0.2180998850, -0.1626530091, 0.1093124205,  0.2375158705,  -0.3752353245,
                            0.2714004557,  0.1138368343,  -0.4042582127, 0.3317205275,  0.0546974115,  -0.4009839433,
                            0.3232339872,  -0.3660051489, -0.2364098257, -0.1066057877, 0.4015589447,  -0.2925484576,
                            0.2920975359,  0.3100994834,  0.3187570919,  -0.1872966174},
        {4, 10},
        device,
        true
    );
    Tensor w_ih_1_reverse(
        std::vector<double>{0.1875681258,  -0.0677889499, 0.3396335155,  -0.2240103942, -0.0391226045, -0.4496273723,
                            -0.0462614435, 0.1152512598,  -0.2975256843, 0.4795480614,  0.0113954698,  0.4741271519,
                            0.4228230895,  -0.4778132176, -0.0626348923, 0.2806986741,  -0.3450509039, 0.1742528000,
                            0.1917584542,  -0.1759205331, -0.0437401499, -0.4448319130, -0.3389858154, -0.1042422254,
                            0.3462471891,  -0.2488266854, 0.1496058795,  0.2249406016,  -0.4751807434, 0.1300498304,
                            -0.1338014082, -0.3780643718},
        {4, 8},
        device,
        true
    );
    Tensor w_hh_0(
        std::vector<double>{
            -0.4698058633,
            0.0698532891,
            0.2329122161,
            -0.3575186637,
            -0.4732325097,
            -0.4760336525,
            0.1221512443,
            0.0248875879,
            0.4305433273,
            0.2275907326,
            0.2389147085,
            -0.3085751010,
            -0.0799059681,
            -0.3216250291,
            0.0203927943,
            -0.0334277165
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_1(
        std::vector<double>{
            0.2242233835,
            0.0388518760,
            0.0372928708,
            0.3698248933,
            0.4160832678,
            0.1442030721,
            0.4842351689,
            -0.4969064318,
            -0.0916697129,
            -0.2792662966,
            0.3544005734,
            0.0073442425,
            -0.3581195623,
            0.2535813056,
            -0.1718877975,
            0.4773153406
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_0_reverse(
        std::vector<double>{
            -0.3390095090,
            -0.0930815922,
            0.1024519806,
            0.1659032039,
            -0.4814029460,
            0.1688244471,
            0.1547971833,
            0.2740758615,
            0.4381195502,
            -0.2860626316,
            -0.0888212482,
            0.3634819128,
            0.3447603584,
            -0.1725840163,
            0.0251601714,
            0.1333798637
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_1_reverse(
        std::vector<double>{
            -0.1273947819,
            0.3163608697,
            -0.3679917673,
            0.2514428607,
            -0.3806544527,
            -0.0193938370,
            -0.2683065154,
            -0.4735772998,
            -0.0908248941,
            0.1648557068,
            -0.2287361307,
            0.0209073657,
            -0.3465829338,
            0.2334919591,
            0.2813207785,
            -0.3283939706
        },
        {4, 4},
        device,
        true
    );
    Tensor b_ih_0(std::vector<double>{0.2206041919, 0.1460439379, 0.0163768546, -0.0624834979}, {4}, device, true);
    Tensor b_ih_1(std::vector<double>{-0.4056123537, -0.3783054181, 0.4110906476, 0.2840246630}, {4}, device, true);
    Tensor b_ih_0_reverse(
        std::vector<double>{-0.2224643388, -0.2992656092, -0.4569516539, -0.0785903644},
        {4},
        device,
        true
    );
    Tensor b_ih_1_reverse(
        std::vector<double>{-0.0252474745, -0.3534068539, -0.3002140724, -0.4523548705},
        {4},
        device,
        true
    );
    Tensor b_hh_0(std::vector<double>{-0.2934907825, -0.0547577468, 0.3086389924, 0.1784551658}, {4}, device, true);
    Tensor b_hh_1(std::vector<double>{0.0193771783, -0.3140710723, -0.3945111643, -0.2057603682}, {4}, device, true);
    Tensor b_hh_0_reverse(
        std::vector<double>{0.3835533633, 0.2492452415, -0.1753011416, -0.2902755421},
        {4},
        device,
        true
    );
    Tensor b_hh_1_reverse(
        std::vector<double>{-0.0758113419, 0.4245196512, 0.4234746262, -0.1307569240},
        {4},
        device,
        true
    );
    rnn.weights_ih.clear();
    rnn.weights_ih.push_back(std::make_shared<Tensor>(w_ih_0.permute({1, 0})));
    rnn.weights_ih.push_back(std::make_shared<Tensor>(w_ih_1.permute({1, 0})));
    rnn.weights_ih_reverse.clear();
    rnn.weights_ih_reverse.push_back(std::make_shared<Tensor>(w_ih_0_reverse.permute({1, 0})));
    rnn.weights_ih_reverse.push_back(std::make_shared<Tensor>(w_ih_1_reverse.permute({1, 0})));
    rnn.weights_hh.clear();
    rnn.weights_hh.push_back(std::make_shared<Tensor>(w_hh_0.permute({1, 0})));
    rnn.weights_hh.push_back(std::make_shared<Tensor>(w_hh_1.permute({1, 0})));
    rnn.weights_hh_reverse.clear();
    rnn.weights_hh_reverse.push_back(std::make_shared<Tensor>(w_hh_0_reverse.permute({1, 0})));
    rnn.weights_hh_reverse.push_back(std::make_shared<Tensor>(w_hh_1_reverse.permute({1, 0})));
    rnn.biases_ih.clear();
    rnn.biases_ih.push_back(std::make_shared<Tensor>(b_ih_0));
    rnn.biases_ih.push_back(std::make_shared<Tensor>(b_ih_1));
    rnn.biases_ih_reverse.clear();
    rnn.biases_ih_reverse.push_back(std::make_shared<Tensor>(b_ih_0_reverse));
    rnn.biases_ih_reverse.push_back(std::make_shared<Tensor>(b_ih_1_reverse));
    rnn.biases_hh.clear();
    rnn.biases_hh.push_back(std::make_shared<Tensor>(b_hh_0));
    rnn.biases_hh.push_back(std::make_shared<Tensor>(b_hh_1));
    rnn.biases_hh_reverse.clear();
    rnn.biases_hh_reverse.push_back(std::make_shared<Tensor>(b_hh_0_reverse));
    rnn.biases_hh_reverse.push_back(std::make_shared<Tensor>(b_hh_1_reverse));
    Tensor x(
        std::vector<double>{
            0.40552099, 0.53272209, 0.37362827, 0.47835793, 0.62588921, 0.22680077, 0.98989827, 0.79317048, 0.52491096,
            0.52219429, 0.39511743, 0.39646217, 0.71928758, 0.53643917, 0.76351164, 0.42057593, 0.00275104, 0.70850611,
            0.56164295, 0.62800029, 0.95502570, 0.03247582, 0.49755528, 0.78658307, 0.69435999, 0.06371662, 0.17942021,
            0.40106260, 0.62920572, 0.78331607, 0.39146551, 0.95106855, 0.38190589, 0.79865087, 0.16467445, 0.85551767,
            0.51995575, 0.28778764, 0.06395404, 0.72306560, 0.83355451, 0.78362683, 0.19138122, 0.39985727, 0.49470455,
            0.50640585, 0.46992822, 0.17278670, 0.22393732, 0.46315068, 0.52167762, 0.55331183, 0.02867861, 0.97760802,
            0.39284889, 0.23998774, 0.22218402, 0.84290535, 0.06032607, 0.57941201, 0.61783610, 0.58698944, 0.32288694,
            0.52838999, 0.90528307, 0.51430005, 0.47301558, 0.86635738, 0.02015154, 0.25542170, 0.39032942, 0.74938017,
            0.60104747, 0.15862677, 0.69853356, 0.72138419, 0.39831749, 0.73881310, 0.54589457, 0.96416395, 0.97720520,
            0.20109011, 0.84477785, 0.02349001, 0.62334513, 0.48539447, 0.82661819, 0.52766115, 0.88651339, 0.51098889,
            0.44454778, 0.75536919, 0.99911529, 0.28720473, 0.38677424, 0.14373095, 0.62323554, 0.08063257, 0.31976749,
            0.72787893
        },
        {2, 5, 10},
        device
    );

    Tensor expected_output(
        std::vector<double>{-0.2632399419, -0.1626104336, 0.3395448270,  -0.0298617422, 0.0609121037,  0.5649860967,
                            0.5481310575,  -0.5732409364, -0.2052174847, -0.1337347342, 0.1482632209,  0.1508790007,
                            -0.1865273059, 0.6785496980,  0.3535075443,  -0.5486284793, 0.0279679267,  -0.3669682082,
                            0.5090745804,  0.4787130438,  -0.0555419660, 0.8171165248,  0.5188293012,  -0.3533466209,
                            -0.7673871767, -0.4719009217, 0.1578600187,  -0.1690505340, 0.1096844025,  0.2513793844,
                            0.5481403223,  -0.2533754543, -0.3665951707, -0.4706530632, 0.2006212337,  0.1337349576,
                            0.1577824687,  0.3038026396,  0.5500447749,  -0.0694024413, -0.6296000759, -0.4451219725,
                            0.5216347358,  0.0540213682,  0.3493908353,  0.4552864583,  0.6875887016,  -0.5687703095,
                            -0.4922771186, -0.4487165701, 0.2859955768,  -0.1547483345, 0.3516615255,  0.0022967052,
                            0.5674102716,  -0.6247301947, -0.3695803990, -0.3293566222, 0.2557573311,  -0.0527173755,
                            0.2351122567,  0.2578776078,  0.5632559415,  -0.6461573923, -0.2896926455, -0.1248451560,
                            0.2510980181,  0.2160453884,  0.2923255371,  0.5612913415,  0.3845171534,  -0.6425910874,
                            -0.6104021685, -0.6795731580, 0.0108942128,  0.2075380127,  -0.1236335112, 0.1688356287,
                            0.3376775343,  -0.5102578184},
        {2, 5, 8},
        device
    );
    Tensor expected_h(
        std::vector<double>{-0.2063896967, -0.0959722284, 0.5188544117,  -0.0999476607, -0.1176531220, -0.2156235490,
                            0.3018635490,  -0.6419112859, -0.0128421700, 0.2196462209,  0.4113023524,  -0.4529634689,
                            0.6178994508,  0.6815407315,  0.2897447282,  -0.0590194413, 0.1834643186,  0.4088242655,
                            0.3123898711,  -0.1298694117, 0.2787575841,  -0.6589336626, -0.4822333509, 0.3792565863,
                            0.4119913973,  -0.6264003277, -0.1821451429, -0.0424103198, -0.0156683719, -0.8706562059,
                            -0.6371787434, 0.3594249686,  0.6816198276,  -0.3554131520, -0.5619405719, -0.5504567951,
                            -0.1243121988, -0.5893577126, -0.6870438754, -0.1836032736, -0.6296000759, -0.4451219725,
                            0.5216347358,  0.0540213682,  -0.4922771186, -0.4487165701, 0.2859955768,  -0.1547483345,
                            -0.3695803990, -0.3293566222, 0.2557573311,  -0.0527173755, -0.2896926455, -0.1248451560,
                            0.2510980181,  0.2160453884,  -0.6104021685, -0.6795731580, 0.0108942128,  0.2075380127,
                            0.0609121037,  0.5649860967,  0.5481310575,  -0.5732409364, -0.1865273059, 0.6785496980,
                            0.3535075443,  -0.5486284793, -0.0555419660, 0.8171165248,  0.5188293012,  -0.3533466209,
                            0.1096844025,  0.2513793844,  0.5481403223,  -0.2533754543, 0.1577824687,  0.3038026396,
                            0.5500447749,  -0.0694024413},
        {4, 5, 4},
        device
    );

    auto output = rnn.forward(x);
    CHECK(allclose(expected_output, output.output));
    CHECK(allclose(expected_h, output.h));
}

// NOLINTNEXTLINE
TEST_CASE("RNN bi-directional with h") {
    auto device = kCPU;
    nn::RNN rnn(10, 4, nn::RNNOptions{.num_layers = 2, .bidirectional = true}, kF64, device);
    Tensor w_ih_0(
        std::vector<double>{0.2329055521,  0.1385271375,  0.1739182314,  -0.2463679655, 0.1201485425,  0.3036600564,
                            -0.1921666453, -0.3823227190, 0.4578479868,  -0.2659382563, -0.0505037927, 0.0180241323,
                            0.3892397867,  -0.2403168133, 0.3205397487,  -0.3652554977, -0.2527349620, -0.0371784752,
                            0.4475868821,  0.0994418394,  -0.2992987233, -0.1216039203, -0.1796349765, 0.1995802977,
                            -0.4893613836, 0.4605807993,  0.0567435748,  0.1348023968,  0.1717753976,  0.1933466090,
                            -0.1245779106, -0.4393322712, -0.0912990969, 0.3996011390,  -0.0282922984, -0.2865738566,
                            -0.2672411763, -0.3871641648, 0.4655371815,  0.3192253362},
        {4, 10},
        device,
        true
    );
    Tensor w_ih_1(
        std::vector<double>{0.0901339176,  0.4980541693,  -0.1787826875, 0.0043235029,  -0.3165460397, -0.1785445500,
                            0.1311115367,  0.2893470097,  0.4119732704,  0.3046222266,  0.3150042954,  -0.3691563680,
                            0.3169833892,  -0.3715657210, 0.2676343139,  0.3892615515,  -0.1727169287, -0.3705768595,
                            -0.4501447362, 0.2680503231,  0.2666701416,  -0.4732410850, -0.2730544930, 0.2004064468,
                            -0.0598230706, 0.2941175768,  0.0623738879,  0.4900391792,  -0.3618247781, 0.0526216445,
                            -0.2104056942, -0.1353844908},
        {4, 8},
        device,
        true
    );
    Tensor w_ih_0_reverse(
        std::vector<double>{-0.4379018204, 0.1140894100,  0.3528108215,  0.4653498052,  -0.4315241963, 0.3633583847,
                            0.1486655801,  -0.1172123769, 0.3334543345,  -0.0047963940, -0.3254784924, 0.4851521970,
                            0.3807434936,  -0.3679993093, -0.0725587543, -0.1312914063, 0.2223324993,  -0.4226386116,
                            -0.1898967552, -0.2180998850, -0.1626530091, 0.1093124205,  0.2375158705,  -0.3752353245,
                            0.2714004557,  0.1138368343,  -0.4042582127, 0.3317205275,  0.0546974115,  -0.4009839433,
                            0.3232339872,  -0.3660051489, -0.2364098257, -0.1066057877, 0.4015589447,  -0.2925484576,
                            0.2920975359,  0.3100994834,  0.3187570919,  -0.1872966174},
        {4, 10},
        device,
        true
    );
    Tensor w_ih_1_reverse(
        std::vector<double>{0.1875681258,  -0.0677889499, 0.3396335155,  -0.2240103942, -0.0391226045, -0.4496273723,
                            -0.0462614435, 0.1152512598,  -0.2975256843, 0.4795480614,  0.0113954698,  0.4741271519,
                            0.4228230895,  -0.4778132176, -0.0626348923, 0.2806986741,  -0.3450509039, 0.1742528000,
                            0.1917584542,  -0.1759205331, -0.0437401499, -0.4448319130, -0.3389858154, -0.1042422254,
                            0.3462471891,  -0.2488266854, 0.1496058795,  0.2249406016,  -0.4751807434, 0.1300498304,
                            -0.1338014082, -0.3780643718},
        {4, 8},
        device,
        true
    );
    Tensor w_hh_0(
        std::vector<double>{
            -0.4698058633,
            0.0698532891,
            0.2329122161,
            -0.3575186637,
            -0.4732325097,
            -0.4760336525,
            0.1221512443,
            0.0248875879,
            0.4305433273,
            0.2275907326,
            0.2389147085,
            -0.3085751010,
            -0.0799059681,
            -0.3216250291,
            0.0203927943,
            -0.0334277165
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_1(
        std::vector<double>{
            0.2242233835,
            0.0388518760,
            0.0372928708,
            0.3698248933,
            0.4160832678,
            0.1442030721,
            0.4842351689,
            -0.4969064318,
            -0.0916697129,
            -0.2792662966,
            0.3544005734,
            0.0073442425,
            -0.3581195623,
            0.2535813056,
            -0.1718877975,
            0.4773153406
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_0_reverse(
        std::vector<double>{
            -0.3390095090,
            -0.0930815922,
            0.1024519806,
            0.1659032039,
            -0.4814029460,
            0.1688244471,
            0.1547971833,
            0.2740758615,
            0.4381195502,
            -0.2860626316,
            -0.0888212482,
            0.3634819128,
            0.3447603584,
            -0.1725840163,
            0.0251601714,
            0.1333798637
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_1_reverse(
        std::vector<double>{
            -0.1273947819,
            0.3163608697,
            -0.3679917673,
            0.2514428607,
            -0.3806544527,
            -0.0193938370,
            -0.2683065154,
            -0.4735772998,
            -0.0908248941,
            0.1648557068,
            -0.2287361307,
            0.0209073657,
            -0.3465829338,
            0.2334919591,
            0.2813207785,
            -0.3283939706
        },
        {4, 4},
        device,
        true
    );
    Tensor b_ih_0(std::vector<double>{0.2206041919, 0.1460439379, 0.0163768546, -0.0624834979}, {4}, device, true);
    Tensor b_ih_1(std::vector<double>{-0.4056123537, -0.3783054181, 0.4110906476, 0.2840246630}, {4}, device, true);
    Tensor b_ih_0_reverse(
        std::vector<double>{-0.2224643388, -0.2992656092, -0.4569516539, -0.0785903644},
        {4},
        device,
        true
    );
    Tensor b_ih_1_reverse(
        std::vector<double>{-0.0252474745, -0.3534068539, -0.3002140724, -0.4523548705},
        {4},
        device,
        true
    );
    Tensor b_hh_0(std::vector<double>{-0.2934907825, -0.0547577468, 0.3086389924, 0.1784551658}, {4}, device, true);
    Tensor b_hh_1(std::vector<double>{0.0193771783, -0.3140710723, -0.3945111643, -0.2057603682}, {4}, device, true);
    Tensor b_hh_0_reverse(
        std::vector<double>{0.3835533633, 0.2492452415, -0.1753011416, -0.2902755421},
        {4},
        device,
        true
    );
    Tensor b_hh_1_reverse(
        std::vector<double>{-0.0758113419, 0.4245196512, 0.4234746262, -0.1307569240},
        {4},
        device,
        true
    );
    rnn.weights_ih.clear();
    rnn.weights_ih.push_back(std::make_shared<Tensor>(w_ih_0.permute({1, 0})));
    rnn.weights_ih.push_back(std::make_shared<Tensor>(w_ih_1.permute({1, 0})));
    rnn.weights_ih_reverse.clear();
    rnn.weights_ih_reverse.push_back(std::make_shared<Tensor>(w_ih_0_reverse.permute({1, 0})));
    rnn.weights_ih_reverse.push_back(std::make_shared<Tensor>(w_ih_1_reverse.permute({1, 0})));
    rnn.weights_hh.clear();
    rnn.weights_hh.push_back(std::make_shared<Tensor>(w_hh_0.permute({1, 0})));
    rnn.weights_hh.push_back(std::make_shared<Tensor>(w_hh_1.permute({1, 0})));
    rnn.weights_hh_reverse.clear();
    rnn.weights_hh_reverse.push_back(std::make_shared<Tensor>(w_hh_0_reverse.permute({1, 0})));
    rnn.weights_hh_reverse.push_back(std::make_shared<Tensor>(w_hh_1_reverse.permute({1, 0})));
    rnn.biases_ih.clear();
    rnn.biases_ih.push_back(std::make_shared<Tensor>(b_ih_0));
    rnn.biases_ih.push_back(std::make_shared<Tensor>(b_ih_1));
    rnn.biases_ih_reverse.clear();
    rnn.biases_ih_reverse.push_back(std::make_shared<Tensor>(b_ih_0_reverse));
    rnn.biases_ih_reverse.push_back(std::make_shared<Tensor>(b_ih_1_reverse));
    rnn.biases_hh.clear();
    rnn.biases_hh.push_back(std::make_shared<Tensor>(b_hh_0));
    rnn.biases_hh.push_back(std::make_shared<Tensor>(b_hh_1));
    rnn.biases_hh_reverse.clear();
    rnn.biases_hh_reverse.push_back(std::make_shared<Tensor>(b_hh_0_reverse));
    rnn.biases_hh_reverse.push_back(std::make_shared<Tensor>(b_hh_1_reverse));
    Tensor x(
        std::vector<double>{
            0.40552099, 0.53272209, 0.37362827, 0.47835793, 0.62588921, 0.22680077, 0.98989827, 0.79317048, 0.52491096,
            0.52219429, 0.39511743, 0.39646217, 0.71928758, 0.53643917, 0.76351164, 0.42057593, 0.00275104, 0.70850611,
            0.56164295, 0.62800029, 0.95502570, 0.03247582, 0.49755528, 0.78658307, 0.69435999, 0.06371662, 0.17942021,
            0.40106260, 0.62920572, 0.78331607, 0.39146551, 0.95106855, 0.38190589, 0.79865087, 0.16467445, 0.85551767,
            0.51995575, 0.28778764, 0.06395404, 0.72306560, 0.83355451, 0.78362683, 0.19138122, 0.39985727, 0.49470455,
            0.50640585, 0.46992822, 0.17278670, 0.22393732, 0.46315068, 0.52167762, 0.55331183, 0.02867861, 0.97760802,
            0.39284889, 0.23998774, 0.22218402, 0.84290535, 0.06032607, 0.57941201, 0.61783610, 0.58698944, 0.32288694,
            0.52838999, 0.90528307, 0.51430005, 0.47301558, 0.86635738, 0.02015154, 0.25542170, 0.39032942, 0.74938017,
            0.60104747, 0.15862677, 0.69853356, 0.72138419, 0.39831749, 0.73881310, 0.54589457, 0.96416395, 0.97720520,
            0.20109011, 0.84477785, 0.02349001, 0.62334513, 0.48539447, 0.82661819, 0.52766115, 0.88651339, 0.51098889,
            0.44454778, 0.75536919, 0.99911529, 0.28720473, 0.38677424, 0.14373095, 0.62323554, 0.08063257, 0.31976749,
            0.72787893
        },
        {2, 5, 10},
        device
    );
    Tensor h(
        std::vector<double>{9.2085446357e-01, 8.2766186119e-01, 1.5764024807e-02, 5.6160421989e-01, 9.9687949752e-01,
                            9.2317085171e-01, 4.3801108429e-01, 2.1647656203e-01, 8.8353075396e-01, 2.3167588538e-01,
                            5.4603534609e-01, 1.6306941604e-01, 8.6954290395e-01, 3.4802039199e-01, 4.2820424861e-01,
                            9.1356983829e-01, 2.9524078706e-01, 6.8695669915e-01, 2.6545464101e-01, 3.1277913806e-01,
                            4.4309113040e-01, 9.2827943427e-01, 9.6716430540e-01, 6.7537664880e-01, 4.2038022953e-01,
                            1.8735474399e-01, 7.1685764377e-01, 1.7708915843e-01, 5.4413519787e-01, 3.4178881049e-01,
                            8.7984282291e-01, 9.2731303338e-01, 6.6819228128e-02, 9.0653104687e-01, 9.5410890901e-01,
                            6.9972595673e-01, 9.0548034701e-01, 9.8943922382e-01, 2.3593236506e-01, 9.4061713335e-01,
                            1.3788631956e-01, 3.4126268440e-01, 2.5879547095e-01, 3.3726381278e-01, 8.7059387625e-01,
                            6.2101730249e-01, 3.4630648365e-01, 7.1847124217e-01, 7.9746622755e-01, 5.2770749704e-02,
                            7.4189795139e-01, 7.4660813822e-01, 4.1703440254e-01, 2.0055203773e-01, 6.0660235945e-01,
                            6.9280912561e-01, 4.4744704821e-01, 7.2689080278e-01, 4.6409086822e-01, 2.9578284330e-01,
                            3.4516649063e-01, 9.1111220076e-01, 7.8099357438e-01, 7.1262043123e-01, 1.2966541468e-01,
                            6.1605792083e-04, 4.4666331940e-01, 6.1425558761e-01, 1.3391687808e-01, 7.8215484913e-01,
                            6.5503124010e-01, 3.3480402617e-01, 3.5892685614e-01, 2.4617357201e-01, 1.4484100154e-01,
                            8.6208560720e-01, 1.5464581198e-01, 9.7582549727e-01, 5.0471189530e-03, 4.1788463075e-01},
        {4, 5, 4},
        device
    );

    Tensor expected_output(
        std::vector<double>{
            -5.2647999852e-01, -3.2035110494e-01, 4.2754626965e-01,  -1.8855008749e-01, 1.2050942265e-01,
            2.7755505222e-01,  6.1075347488e-01,  -6.5377688312e-01, -2.3527412372e-01, 2.3503469779e-02,
            4.7839808254e-02,  -9.5594391468e-02, 6.7050973931e-03,  4.6122568334e-01,  4.6045100345e-01,
            -5.5328147512e-01, 1.8045533848e-01,  -1.1933759716e-01, 6.1453440194e-01,  3.1463228437e-01,
            9.8388663346e-02,  7.8698647851e-01,  6.1108817471e-01,  -4.7557974349e-01, -7.1962944852e-01,
            -5.6052078405e-01, 3.7786037442e-01,  -1.6681915598e-01, 1.6242292958e-02,  2.8598767807e-01,
            6.5010785767e-01,  -4.2171779407e-01, -4.2958232063e-01, -1.9734470609e-01, 1.0612321351e-01,
            -1.3296455864e-02, 1.1900854474e-01,  -9.8945570670e-02, 5.0263721126e-01,  -2.3750015940e-01,
            -4.7057137524e-01, -3.4585953050e-01, 4.4277811799e-01,  2.8256033449e-01,  3.2261854240e-01,
            3.1031762141e-02,  5.3184490181e-01,  -5.0789798191e-01, -2.1437029089e-01, -1.1410079435e-01,
            3.3729796595e-02,  1.7173306365e-02,  2.9506290080e-01,  -1.6995109723e-01, 3.9350704469e-01,
            -7.1001233943e-01, -1.1066192770e-01, 1.5953584871e-01,  1.9884480890e-04,  -1.0207565115e-01,
            2.1129810644e-01,  -8.3635400338e-03, 3.0170984977e-01,  -5.8273249667e-01, -2.5318480878e-01,
            -1.7679113196e-01, 2.2691273377e-01,  2.5140302386e-01,  1.9665583774e-01,  -1.0354571093e-02,
            1.1498447317e-01,  -7.7381724961e-01, -4.5453788318e-01, -5.5075608644e-01, -2.2605206040e-01,
            3.2956939723e-01,  2.4361653897e-01,  -1.5363692448e-02, 3.1799578406e-01,  -4.9201299613e-01
        },
        {2, 5, 8},
        device
    );
    Tensor expected_h(
        std::vector<double>{
            1.2799158589e-01,  4.6658641529e-01,  3.6063256911e-01,  1.9166627471e-01,  2.3904982249e-01,
            3.6131682257e-01,  1.9729558911e-01,  -4.2852067292e-01, 2.4743972337e-01,  5.5237854009e-01,
            3.3213605613e-01,  -3.0800114675e-01, 7.7558497236e-01,  8.5572068850e-01,  7.2597679311e-02,
            1.1596668662e-01,  3.3620828695e-01,  6.1444229845e-01,  2.8193272231e-01,  2.3242429808e-02,
            2.9038386670e-01,  -6.1264551918e-01, -5.0382203233e-01, 3.5800899110e-01,  4.5774610705e-01,
            -5.7243730220e-01, -1.6008814386e-01, -3.7597352571e-02, 4.1350476143e-02,  -8.3001815906e-01,
            -6.2192280028e-01, 3.7839496917e-01,  6.3709437182e-01,  -3.3763465497e-01, -6.1892991849e-01,
            -5.8250439378e-01, 1.0021293029e-03,  -4.4526479903e-01, -6.9744599252e-01, -2.0637665316e-01,
            -4.7057137524e-01, -3.4585953050e-01, 4.4277811799e-01,  2.8256033449e-01,  -2.1437029089e-01,
            -1.1410079435e-01, 3.3729796595e-02,  1.7173306365e-02,  -1.1066192770e-01, 1.5953584871e-01,
            1.9884480890e-04,  -1.0207565115e-01, -2.5318480878e-01, -1.7679113196e-01, 2.2691273377e-01,
            2.5140302386e-01,  -4.5453788318e-01, -5.5075608644e-01, -2.2605206040e-01, 3.2956939723e-01,
            1.2050942265e-01,  2.7755505222e-01,  6.1075347488e-01,  -6.5377688312e-01, 6.7050973931e-03,
            4.6122568334e-01,  4.6045100345e-01,  -5.5328147512e-01, 9.8388663346e-02,  7.8698647851e-01,
            6.1108817471e-01,  -4.7557974349e-01, 1.6242292958e-02,  2.8598767807e-01,  6.5010785767e-01,
            -4.2171779407e-01, 1.1900854474e-01,  -9.8945570670e-02, 5.0263721126e-01,  -2.3750015940e-01
        },
        {4, 5, 4},
        device
    );

    auto output = rnn.forward(x, h);
    CHECK(allclose(expected_output, output.output));
    CHECK(allclose(expected_h, output.h));
}

// NOLINTNEXTLINE
TEST_CASE("RNN bi-directional backward") {
    auto device = kCPU;
    nn::RNN rnn(10, 4, nn::RNNOptions{.num_layers = 2, .bidirectional = true}, kF64, device);
    Tensor w_ih_0(
        std::vector<double>{0.2329055521,  0.1385271375,  0.1739182314,  -0.2463679655, 0.1201485425,  0.3036600564,
                            -0.1921666453, -0.3823227190, 0.4578479868,  -0.2659382563, -0.0505037927, 0.0180241323,
                            0.3892397867,  -0.2403168133, 0.3205397487,  -0.3652554977, -0.2527349620, -0.0371784752,
                            0.4475868821,  0.0994418394,  -0.2992987233, -0.1216039203, -0.1796349765, 0.1995802977,
                            -0.4893613836, 0.4605807993,  0.0567435748,  0.1348023968,  0.1717753976,  0.1933466090,
                            -0.1245779106, -0.4393322712, -0.0912990969, 0.3996011390,  -0.0282922984, -0.2865738566,
                            -0.2672411763, -0.3871641648, 0.4655371815,  0.3192253362},
        {4, 10},
        device,
        true
    );
    Tensor w_ih_1(
        std::vector<double>{0.0901339176,  0.4980541693,  -0.1787826875, 0.0043235029,  -0.3165460397, -0.1785445500,
                            0.1311115367,  0.2893470097,  0.4119732704,  0.3046222266,  0.3150042954,  -0.3691563680,
                            0.3169833892,  -0.3715657210, 0.2676343139,  0.3892615515,  -0.1727169287, -0.3705768595,
                            -0.4501447362, 0.2680503231,  0.2666701416,  -0.4732410850, -0.2730544930, 0.2004064468,
                            -0.0598230706, 0.2941175768,  0.0623738879,  0.4900391792,  -0.3618247781, 0.0526216445,
                            -0.2104056942, -0.1353844908},
        {4, 8},
        device,
        true
    );
    Tensor w_ih_0_reverse(
        std::vector<double>{-0.4379018204, 0.1140894100,  0.3528108215,  0.4653498052,  -0.4315241963, 0.3633583847,
                            0.1486655801,  -0.1172123769, 0.3334543345,  -0.0047963940, -0.3254784924, 0.4851521970,
                            0.3807434936,  -0.3679993093, -0.0725587543, -0.1312914063, 0.2223324993,  -0.4226386116,
                            -0.1898967552, -0.2180998850, -0.1626530091, 0.1093124205,  0.2375158705,  -0.3752353245,
                            0.2714004557,  0.1138368343,  -0.4042582127, 0.3317205275,  0.0546974115,  -0.4009839433,
                            0.3232339872,  -0.3660051489, -0.2364098257, -0.1066057877, 0.4015589447,  -0.2925484576,
                            0.2920975359,  0.3100994834,  0.3187570919,  -0.1872966174},
        {4, 10},
        device,
        true
    );
    Tensor w_ih_1_reverse(
        std::vector<double>{0.1875681258,  -0.0677889499, 0.3396335155,  -0.2240103942, -0.0391226045, -0.4496273723,
                            -0.0462614435, 0.1152512598,  -0.2975256843, 0.4795480614,  0.0113954698,  0.4741271519,
                            0.4228230895,  -0.4778132176, -0.0626348923, 0.2806986741,  -0.3450509039, 0.1742528000,
                            0.1917584542,  -0.1759205331, -0.0437401499, -0.4448319130, -0.3389858154, -0.1042422254,
                            0.3462471891,  -0.2488266854, 0.1496058795,  0.2249406016,  -0.4751807434, 0.1300498304,
                            -0.1338014082, -0.3780643718},
        {4, 8},
        device,
        true
    );
    Tensor w_hh_0(
        std::vector<double>{
            -0.4698058633,
            0.0698532891,
            0.2329122161,
            -0.3575186637,
            -0.4732325097,
            -0.4760336525,
            0.1221512443,
            0.0248875879,
            0.4305433273,
            0.2275907326,
            0.2389147085,
            -0.3085751010,
            -0.0799059681,
            -0.3216250291,
            0.0203927943,
            -0.0334277165
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_1(
        std::vector<double>{
            0.2242233835,
            0.0388518760,
            0.0372928708,
            0.3698248933,
            0.4160832678,
            0.1442030721,
            0.4842351689,
            -0.4969064318,
            -0.0916697129,
            -0.2792662966,
            0.3544005734,
            0.0073442425,
            -0.3581195623,
            0.2535813056,
            -0.1718877975,
            0.4773153406
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_0_reverse(
        std::vector<double>{
            -0.3390095090,
            -0.0930815922,
            0.1024519806,
            0.1659032039,
            -0.4814029460,
            0.1688244471,
            0.1547971833,
            0.2740758615,
            0.4381195502,
            -0.2860626316,
            -0.0888212482,
            0.3634819128,
            0.3447603584,
            -0.1725840163,
            0.0251601714,
            0.1333798637
        },
        {4, 4},
        device,
        true
    );
    Tensor w_hh_1_reverse(
        std::vector<double>{
            -0.1273947819,
            0.3163608697,
            -0.3679917673,
            0.2514428607,
            -0.3806544527,
            -0.0193938370,
            -0.2683065154,
            -0.4735772998,
            -0.0908248941,
            0.1648557068,
            -0.2287361307,
            0.0209073657,
            -0.3465829338,
            0.2334919591,
            0.2813207785,
            -0.3283939706
        },
        {4, 4},
        device,
        true
    );
    Tensor b_ih_0(std::vector<double>{0.2206041919, 0.1460439379, 0.0163768546, -0.0624834979}, {4}, device, true);
    Tensor b_ih_1(std::vector<double>{-0.4056123537, -0.3783054181, 0.4110906476, 0.2840246630}, {4}, device, true);
    Tensor b_ih_0_reverse(
        std::vector<double>{-0.2224643388, -0.2992656092, -0.4569516539, -0.0785903644},
        {4},
        device,
        true
    );
    Tensor b_ih_1_reverse(
        std::vector<double>{-0.0252474745, -0.3534068539, -0.3002140724, -0.4523548705},
        {4},
        device,
        true
    );
    Tensor b_hh_0(std::vector<double>{-0.2934907825, -0.0547577468, 0.3086389924, 0.1784551658}, {4}, device, true);
    Tensor b_hh_1(std::vector<double>{0.0193771783, -0.3140710723, -0.3945111643, -0.2057603682}, {4}, device, true);
    Tensor b_hh_0_reverse(
        std::vector<double>{0.3835533633, 0.2492452415, -0.1753011416, -0.2902755421},
        {4},
        device,
        true
    );
    Tensor b_hh_1_reverse(
        std::vector<double>{-0.0758113419, 0.4245196512, 0.4234746262, -0.1307569240},
        {4},
        device,
        true
    );
    rnn.weights_ih.clear();
    rnn.weights_ih.push_back(std::make_shared<Tensor>(w_ih_0.permute({1, 0})));
    rnn.weights_ih.push_back(std::make_shared<Tensor>(w_ih_1.permute({1, 0})));
    rnn.weights_ih_reverse.clear();
    rnn.weights_ih_reverse.push_back(std::make_shared<Tensor>(w_ih_0_reverse.permute({1, 0})));
    rnn.weights_ih_reverse.push_back(std::make_shared<Tensor>(w_ih_1_reverse.permute({1, 0})));
    rnn.weights_hh.clear();
    rnn.weights_hh.push_back(std::make_shared<Tensor>(w_hh_0.permute({1, 0})));
    rnn.weights_hh.push_back(std::make_shared<Tensor>(w_hh_1.permute({1, 0})));
    rnn.weights_hh_reverse.clear();
    rnn.weights_hh_reverse.push_back(std::make_shared<Tensor>(w_hh_0_reverse.permute({1, 0})));
    rnn.weights_hh_reverse.push_back(std::make_shared<Tensor>(w_hh_1_reverse.permute({1, 0})));
    rnn.biases_ih.clear();
    rnn.biases_ih.push_back(std::make_shared<Tensor>(b_ih_0));
    rnn.biases_ih.push_back(std::make_shared<Tensor>(b_ih_1));
    rnn.biases_ih_reverse.clear();
    rnn.biases_ih_reverse.push_back(std::make_shared<Tensor>(b_ih_0_reverse));
    rnn.biases_ih_reverse.push_back(std::make_shared<Tensor>(b_ih_1_reverse));
    rnn.biases_hh.clear();
    rnn.biases_hh.push_back(std::make_shared<Tensor>(b_hh_0));
    rnn.biases_hh.push_back(std::make_shared<Tensor>(b_hh_1));
    rnn.biases_hh_reverse.clear();
    rnn.biases_hh_reverse.push_back(std::make_shared<Tensor>(b_hh_0_reverse));
    rnn.biases_hh_reverse.push_back(std::make_shared<Tensor>(b_hh_1_reverse));
    Tensor x(
        std::vector<double>{
            0.40552099, 0.53272209, 0.37362827, 0.47835793, 0.62588921, 0.22680077, 0.98989827, 0.79317048, 0.52491096,
            0.52219429, 0.39511743, 0.39646217, 0.71928758, 0.53643917, 0.76351164, 0.42057593, 0.00275104, 0.70850611,
            0.56164295, 0.62800029, 0.95502570, 0.03247582, 0.49755528, 0.78658307, 0.69435999, 0.06371662, 0.17942021,
            0.40106260, 0.62920572, 0.78331607, 0.39146551, 0.95106855, 0.38190589, 0.79865087, 0.16467445, 0.85551767,
            0.51995575, 0.28778764, 0.06395404, 0.72306560, 0.83355451, 0.78362683, 0.19138122, 0.39985727, 0.49470455,
            0.50640585, 0.46992822, 0.17278670, 0.22393732, 0.46315068, 0.52167762, 0.55331183, 0.02867861, 0.97760802,
            0.39284889, 0.23998774, 0.22218402, 0.84290535, 0.06032607, 0.57941201, 0.61783610, 0.58698944, 0.32288694,
            0.52838999, 0.90528307, 0.51430005, 0.47301558, 0.86635738, 0.02015154, 0.25542170, 0.39032942, 0.74938017,
            0.60104747, 0.15862677, 0.69853356, 0.72138419, 0.39831749, 0.73881310, 0.54589457, 0.96416395, 0.97720520,
            0.20109011, 0.84477785, 0.02349001, 0.62334513, 0.48539447, 0.82661819, 0.52766115, 0.88651339, 0.51098889,
            0.44454778, 0.75536919, 0.99911529, 0.28720473, 0.38677424, 0.14373095, 0.62323554, 0.08063257, 0.31976749,
            0.72787893
        },
        {2, 5, 10},
        device
    );

    Tensor expected_w_ih_0_grad(
        std::vector<double>{-1.2242492370, 2.6803135533, 0.8451131487,  4.9194881785, -1.3898989502, 3.0165075773,
                            0.6120455268,  5.1793649984, -1.2389411308, 2.6356922320, 0.5138563491,  4.3042848504,
                            -1.1232814232, 2.0694671929, 0.8923208203,  4.0778155101, -1.2504485298, 3.1055833543,
                            0.8520900888,  4.5982842694, -0.9375010917, 2.1648342996, 0.4802577780,  3.7022231839,
                            -1.0719262206, 2.4600039741, 0.5590504616,  4.1151384492, -1.0526014136, 3.3233623439,
                            0.8153425122,  4.2836661007, -0.8126913763, 1.6345365716, 0.6130143553,  3.0225664718,
                            -1.4195770434, 3.0607645950, 0.8670009961,  5.2617732642},
        {10, 4},
        device
    );
    Tensor expected_w_ih_1_grad(
        std::vector<double>{0.5366296778,  0.4580797852,  0.5946309745,  0.5334229469,  2.0949036831,  2.0127514020,
                            2.3663826918,  2.2285440995,  2.5134267220,  2.9566685109,  3.8548365296,  3.7236027691,
                            -1.0358076123, -1.3157027852, -1.7479820606, -1.8162197919, 2.1771749845,  2.5979961378,
                            3.4877317977,  3.2509493562,  -4.0883792793, -4.5310929988, -5.5644047758, -5.3904570199,
                            -4.3762056336, -4.8055772793, -6.2277999667, -6.1004926668, 0.0641312577,  -0.1223590740,
                            -0.7305046073, -0.6208848146},
        {8, 4},
        device
    );
    Tensor expected_w_ih_0_reverse_grad(
        std::vector<double>{1.7059107892,  -7.8415700883, -2.4839061295, 2.4771110144,  1.8122948973,  -8.4668916320,
                            -2.5092817770, 2.4227757728,  1.7949100663,  -7.3422337274, -2.2489092344, 2.1130233478,
                            0.9649015260,  -6.2898496656, -2.1794520552, 2.2313403092,  1.7986396709,  -7.7753353907,
                            -2.5458108721, 2.6628248760,  1.3803633308,  -6.5293838894, -1.9699272747, 1.8838547283,
                            1.7673192859,  -6.9945244008, -2.0154375981, 1.9214242967,  1.9939448581,  -7.2993862805,
                            -2.3730770895, 2.4948198916,  0.9340779141,  -5.1570962591, -1.6804155974, 1.8209419539,
                            1.6087204524,  -8.5761767737, -2.6860506053, 2.8054271175},
        {10, 4},
        device
    );
    Tensor expected_w_ih_1_reverse_grad(
        std::vector<double>{0.0582718551,  0.5587891121,  0.3110850880,  0.1932502580,  1.1540869805,  1.6947117452,
                            1.3186223725,  1.0855529224,  1.9276924209,  3.7198087078,  1.7670003879,  2.0556171963,
                            -0.6403861156, -2.6064760487, -0.6538906620, -0.8603039789, 1.5871307426,  3.3598426641,
                            1.6125614712,  1.6805669282,  -3.5029405256, -3.9548076346, -2.7866789538, -3.2606053936,
                            -3.1856190307, -5.9346971987, -2.9437259356, -3.4581431451, -0.1656498156, -1.1779495562,
                            -0.2178683226, -0.4055130747},
        {8, 4},
        device
    );

    Tensor expected_w_hh_0_grad(
        std::vector<double>{
            -0.0975664347,
            0.1010155989,
            -0.0329065243,
            0.0955303862,
            -0.1852518888,
            1.3880783068,
            0.0581911226,
            0.8627566780,
            -0.1881648971,
            1.3681059999,
            -0.0085144739,
            1.3472139735,
            0.0525227149,
            0.0081616561,
            0.0500124547,
            -0.3532207493
        },
        {4, 4},
        device
    );
    Tensor expected_w_hh_1_grad(
        std::vector<double>{
            -1.2232223834,
            -1.3027675859,
            -1.4394600701,
            -1.5172587441,
            -1.2439124914,
            -1.2822025410,
            -1.4968686101,
            -1.5588721676,
            1.0273080953,
            1.1079028087,
            1.2075694105,
            1.3333983619,
            0.4386596371,
            0.4288970383,
            0.5395285849,
            0.5616886645
        },
        {4, 4},
        device
    );
    Tensor expected_w_hh_0_reverse_grad(
        std::vector<double>{
            -0.4101733886,
            -2.0670831419,
            -0.7871679289,
            0.9501623096,
            0.2472328844,
            1.9108520928,
            0.8438024236,
            -0.9743132999,
            0.6034272806,
            3.8227797044,
            1.4861181240,
            -1.7337929039,
            0.2536836179,
            0.1930466323,
            0.1145333780,
            -0.3184536342
        },
        {4, 4},
        device
    );
    Tensor expected_w_hh_1_reverse_grad(
        std::vector<double>{
            1.0901608657,
            0.6673711881,
            0.8422220088,
            0.8366710736,
            1.4320671373,
            1.0759672773,
            1.0193690304,
            1.2262423150,
            2.5033866892,
            1.6281734143,
            1.8936426294,
            2.0470809431,
            -2.9462334546,
            -2.0041785809,
            -2.2221653071,
            -2.4931796225
        },
        {4, 4},
        device
    );

    Tensor expected_b_ih_0_grad(
        std::vector<double>{-2.2679525924, 4.9932723941, 1.3801932441, 8.5261955756},
        {4},
        device
    );
    Tensor expected_b_ih_1_grad(
        std::vector<double>{8.1787948327, 9.0150590664, 11.6350092864, 11.2354963952},
        {4},
        device
    );
    Tensor expected_b_ih_0_reverse_grad(
        std::vector<double>{2.9751321600, -13.9022835626, -4.3914586857, 4.4023376050},
        {4},
        device
    );
    Tensor expected_b_ih_1_reverse_grad(
        std::vector<double>{6.1017437949, 10.4792210833, 5.5923873457, 6.2892636991},
        {4},
        device
    );

    Tensor expected_b_hh_0_grad(
        std::vector<double>{-2.2679525924, 4.9932723941, 1.3801932441, 8.5261955756},
        {4},
        device
    );
    Tensor expected_b_hh_1_grad(
        std::vector<double>{8.1787948327, 9.0150590664, 11.6350092864, 11.2354963952},
        {4},
        device
    );
    Tensor expected_b_hh_0_reverse_grad(
        std::vector<double>{2.9751321600, -13.9022835626, -4.3914586857, 4.4023376050},
        {4},
        device
    );
    Tensor expected_b_hh_1_reverse_grad(
        std::vector<double>{6.1017437949, 10.4792210833, 5.5923873457, 6.2892636991},
        {4},
        device
    );

    auto output = rnn.forward(x).output;
    output.backward(ones_like(output));

    CHECK(allclose(rnn.weights_ih[0]->grad().value(), expected_w_ih_0_grad));
    CHECK(allclose(rnn.weights_ih[1]->grad().value(), expected_w_ih_1_grad));
    CHECK(allclose(rnn.weights_ih_reverse[0]->grad().value(), expected_w_ih_0_reverse_grad));
    CHECK(allclose(rnn.weights_ih_reverse[1]->grad().value(), expected_w_ih_1_reverse_grad));

    CHECK(allclose(rnn.weights_hh[0]->grad().value(), expected_w_hh_0_grad));
    CHECK(allclose(rnn.weights_hh[1]->grad().value(), expected_w_hh_1_grad));
    CHECK(allclose(rnn.weights_hh_reverse[0]->grad().value(), expected_w_hh_0_reverse_grad));
    CHECK(allclose(rnn.weights_hh_reverse[1]->grad().value(), expected_w_hh_1_reverse_grad));

    CHECK(allclose(rnn.biases_ih[0]->grad().value(), expected_b_ih_0_grad));
    CHECK(allclose(rnn.biases_ih[1]->grad().value(), expected_b_ih_1_grad));
    CHECK(allclose(rnn.biases_ih_reverse[0]->grad().value(), expected_b_ih_0_reverse_grad));
    CHECK(allclose(rnn.biases_ih_reverse[1]->grad().value(), expected_b_ih_1_reverse_grad));

    CHECK(allclose(rnn.biases_hh[0]->grad().value(), expected_b_hh_0_grad));
    CHECK(allclose(rnn.biases_hh[1]->grad().value(), expected_b_hh_1_grad));
    CHECK(allclose(rnn.biases_hh_reverse[0]->grad().value(), expected_b_hh_0_reverse_grad));
    CHECK(allclose(rnn.biases_hh_reverse[1]->grad().value(), expected_b_hh_1_reverse_grad));
}
