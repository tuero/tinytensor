// test_batchnorm.cpp
// Test BatchNorm module

#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <tt/device.h>
#include <tt/exception.h>
#include <tt/index.h>
#include <tt/nn/batchnorm.h>
#include <tt/scalar.h>
#include <tt/shape.h>
#include <tt/tensor.h>

#include "doctest.h"
#include "test_util.h"

#include <cmath>
#include <vector>

using namespace tinytensor;

// NOLINTNEXTLINE
TEST_CASE("BatchNorm1d over 2d inputs") {
    auto device = kCPU;

    Tensor x1(
        std::vector<double>{
            0.9700530018,
            0.7078198644,
            0.4593829431,
            0.9207476841,
            0.6450241201,
            0.7911478922,
            0.1786061752,
            0.3511076244,
            0.5813409198,
            0.2882358921,
            0.4528688489,
            0.1767995262,
            0.3552667583,
            0.6219052487,
            0.4818484008,
            0.4408004990
        },
        {4, 4},
        device,
        true
    );
    Tensor x2(
        std::vector<double>{
            0.4072815744,
            0.2054385935,
            0.6650381758,
            0.7848739005,
            0.2103664749,
            0.6767391209,
            0.1097352602,
            0.5237520594,
            0.2260202029,
            0.5582430754,
            0.5875289618,
            0.6819456857,
            0.7453761606,
            0.2276556366,
            0.8098922664,
            0.6305903134
        },
        {4, 4},
        device,
        true
    );

    Tensor expected1(
        std::vector<double>{
            1.5100923627,
            0.5527031441,
            0.5322563006,
            1.6260696862,
            0.0322946052,
            0.9890733441,
            -1.7250075607,
            -0.4397371705,
            -0.2572516349,
            -1.6445640512,
            0.4798871903,
            -1.0718676857,
            -1.2851353329,
            0.1027875630,
            0.7128640698,
            -0.1144648300
        },
        {4, 4},
        device,
        true
    );
    Tensor expected2(
        std::vector<double>{
            0.0465216831,
            -1.0322120338,
            0.4645189443,
            1.3763908513,
            -0.8676890067,
            1.2670643446,
            -1.6499966789,
            -1.3971564037,
            -0.7950140034,
            0.6889721454,
            0.1693747281,
            0.2831224123,
            1.6161813270,
            -0.9238244562,
            1.0161030064,
            -0.2623568599
        },
        {4, 4},
        device,
        true
    );
    Tensor expected3(
        std::vector<double>{
            0.9627998047,
            0.6757509077,
            0.4079931800,
            0.8973119152,
            0.6043020034,
            0.7677721429,
            0.0981272656,
            0.2683699828,
            0.5340612076,
            0.2123937826,
            0.4008042099,
            0.0759156949,
            0.2847077059,
            0.5808732385,
            0.4327861129,
            0.3674002546
        },
        {4, 4},
        device,
        true
    );
    Tensor expected4(
        std::vector<double>{
            0.3420785988,
            0.1209586449,
            0.6349547878,
            0.7472931119,
            0.1248867301,
            0.6414276616,
            0.0221211587,
            0.4589874135,
            0.1421523560,
            0.5105695006,
            0.5494154335,
            0.6336496467,
            0.7149875082,
            0.1454934840,
            0.7948161097,
            0.5769479690
        },
        {4, 4},
        device,
        true
    );

    nn::BatchNorm1d bn(4);

    bn.train();
    Tensor res1 = bn.forward(x1);
    Tensor res2 = bn.forward(x2);
    CHECK(allclose(res1, expected1));
    CHECK(allclose(res2, expected2));

    bn.eval();
    Tensor res3 = bn.forward(x1);
    Tensor res4 = bn.forward(x2);
    CHECK(allclose(res3, expected3));
    CHECK(allclose(res4, expected4));
}

// NOLINTNEXTLINE
TEST_CASE("BatchNorm1d over 3d input") {
    auto device = kCPU;

    Tensor x1(
        std::vector<double>{0.9700530018, 0.7078198644, 0.4593829431, 0.9207476841, 0.6450241201, 0.7911478922,
                            0.1786061752, 0.3511076244, 0.5813409198, 0.2882358921, 0.4528688489, 0.1767995262,
                            0.3552667583, 0.6219052487, 0.4818484008, 0.4408004990, 0.4072815744, 0.2054385935,
                            0.6650381758, 0.7848739005, 0.2103664749, 0.6767391209, 0.1097352602, 0.5237520594,
                            0.2260202029, 0.5582430754, 0.5875289618, 0.6819456857, 0.7453761606, 0.2276556366,
                            0.8098922664, 0.6305903134, 0.1958881457, 0.1527262379, 0.4815065022, 0.9175058125,
                            0.5720397102, 0.4808294232, 0.7960586083, 0.3679702043, 0.2721837106, 0.0414394867,
                            0.7486882683, 0.3417558526, 0.5382250086, 0.4663654189, 0.8634864608, 0.0410593751},
        {4, 3, 4},
        device,
        true
    );
    Tensor x2(
        std::vector<double>{0.9972603835, 0.8796640992, 0.7629971687, 0.2558997318, 0.1896080775, 0.9877646698,
                            0.7796018768, 0.3618793465, 0.5658438596, 0.7411996910, 0.0044629453, 0.5836046331,
                            0.5697132769, 0.0482853292, 0.1630045496, 0.9986809627, 0.6006669758, 0.1491397202,
                            0.3941369121, 0.8634036173, 0.1111691826, 0.8095259533, 0.7889851943, 0.7976543949,
                            0.4067139891, 0.7236211067, 0.0118146038, 0.2565920075, 0.1886534594, 0.1625644490,
                            0.4951283841, 0.1543591922, 0.2295393374, 0.4106006232, 0.3740821919, 0.1829006983,
                            0.3997668577, 0.5176780267, 0.6120128234, 0.3901567083, 0.5384221473, 0.1986132992,
                            0.4292197272, 0.8564509594, 0.9220216976, 0.0381015975, 0.7036744426, 0.1759125699},
        {4, 3, 4},
        device,
        true
    );

    Tensor expected1(
        std::vector<double>{2.0008017058,  0.6666779259,  -0.5972569365, 1.7499585154,  0.6094290301,  1.1852852572,
                            -1.2286680448, -0.5488605617, 0.6404257717,  -0.5037874355, 0.1389009719,  -0.9388088430,
                            -1.1269530663, 0.2295831598,  -0.4829628333, -0.6917960202, -0.3274857749, -1.1229247086,
                            0.6883020184,  1.1605602097,  -0.8077713567, 1.0128379494,  -1.2006119907, 0.4156123825,
                            -1.7845011730, -0.0943012284, 0.0546921365,  0.5350417893,  1.0049043630,  -1.0353700113,
                            1.2591545838,  0.5525471322,  -0.8642913544, -1.0327853082, 0.2506956465,  1.9527345815,
                            -0.0241101809, -0.4881469311, 1.1155968069,  -1.0623236699, -0.8598902223, -1.7692254819,
                            1.0179569816,  -0.5857147706, 0.4721113778,  0.1915884122,  1.7418557161,  -1.4687065211},
        {4, 3, 4},
        device,
        true
    );
    Tensor expected2(
        std::vector<double>{1.6347363346,  1.2484382854,  0.8651931180,  -0.8005971902, -0.9703507950, 1.9008735859,
                            1.1520454833,  -0.3506359765, 0.3351125600,  0.9175743486,  -1.5295698338, 0.3941067309,
                            0.2302649753,  -1.4826003604, -1.1057533256, 1.6394028679,  0.5083594507,  -1.1159284113,
                            -0.2345952023, 1.4535071300,  -1.1751344817, 1.1445268065,  1.0762986380,  1.1050942478,
                            -0.3051797222, 0.7358446778,  -1.6024049118, -0.7983230982, -0.9737848616, -1.0676353707,
                            0.1287034025,  -1.0971523022, -0.7819562707, -0.1805432492, -0.3018428415, -0.9368711369,
                            -0.3280007097, 0.0593317204,  0.3692169195,  -0.3595695808, 0.2844449072,  -0.9379561341,
                            -0.1083911029, 1.4284961971,  1.5181925804,  -1.4178357137, 0.7929305138,  -0.9600828985},
        {4, 3, 4},
        device,
        true
    );
    Tensor expected3(
        std::vector<double>{0.9566471182, 0.6676929773, 0.3939408579, 0.9023176926, 0.6111954586, 0.7721278396,
                            0.0975093597, 0.2874926086, 0.5471744063, 0.2246669836, 0.4058148506, 0.1020520443,
                            0.2792154535, 0.5730238435, 0.4186954983, 0.3734649020, 0.3493593903, 0.1270610535,
                            0.6332377970, 0.7652180233, 0.1389862116, 0.6521423361, 0.0282603262, 0.4838086050,
                            0.1367989468, 0.5028746290, 0.5351446855, 0.6391822744, 0.7217174673, 0.1515296365,
                            0.7927718234, 0.5952988878, 0.1230555103, 0.0755638798, 0.4373252475, 0.9170611803,
                            0.5180771118, 0.4175726890, 0.7649230631, 0.2932133539, 0.2005703153, -0.0535582008,
                            0.7253652337, 0.2771931010, 0.4997333865, 0.4206653089, 0.8576229576, -0.0473046782},
        {4, 3, 4},
        device,
        true
    );
    Tensor expected4(
        std::vector<double>{0.9866268747, 0.8570477771,  0.7284927325,  0.1697231366,  0.1096262269,  0.9886703345,
                            0.7594117173, 0.2993559684,  0.5301227815,  0.7230691724,  -0.0875722245, 0.5496652006,
                            0.5155136199, -0.0590467356, 0.0673621313,  0.9881922079,  0.5623430320,  0.0650566883,
                            0.3348826097, 0.8517061705,  0.0298380904,  0.7982494821,  0.7756482074,  0.7851870460,
                            0.3359050486, 0.6851043328,  -0.0992337510, 0.1704859538,  0.1085748650,  0.0798419183,
                            0.4461088518, 0.0708051168,  0.1600823712,  0.3593065507,  0.3191248272,  0.1087652464,
                            0.3282500191, 0.4581760874,  0.5621234010,  0.3176606158,  0.4937901312,  0.1195440640,
                            0.3735208195, 0.8440489099,  0.9220300697,  -0.0505591609, 0.6817796345,  0.1010761143},
        {4, 3, 4},
        device,
        true
    );

    nn::BatchNorm1d bn(3);

    bn.train();
    Tensor res1 = bn.forward(x1);
    Tensor res2 = bn.forward(x2);
    CHECK(allclose(res1, expected1));
    CHECK(allclose(res2, expected2));

    bn.eval();
    Tensor res3 = bn.forward(x1);
    Tensor res4 = bn.forward(x2);
    CHECK(allclose(res3, expected3));
    CHECK(allclose(res4, expected4));
}

// NOLINTNEXTLINE
TEST_CASE("BatchNorm2d") {
    auto device = kCPU;

    Tensor x1(
        std::vector<double>{
            0.9700530018, 0.7078198644, 0.4593829431, 0.9207476841, 0.6450241201, 0.7911478922, 0.1786061752,
            0.3511076244, 0.5813409198, 0.2882358921, 0.4528688489, 0.1767995262, 0.3552667583, 0.6219052487,
            0.4818484008, 0.4408004990, 0.4072815744, 0.2054385935, 0.6650381758, 0.7848739005, 0.2103664749,
            0.6767391209, 0.1097352602, 0.5237520594, 0.2260202029, 0.5582430754, 0.5875289618, 0.6819456857,
            0.7453761606, 0.2276556366, 0.8098922664, 0.6305903134, 0.1958881457, 0.1527262379, 0.4815065022,
            0.9175058125, 0.5720397102, 0.4808294232, 0.7960586083, 0.3679702043, 0.2721837106, 0.0414394867,
            0.7486882683, 0.3417558526, 0.5382250086, 0.4663654189, 0.8634864608, 0.0410593751, 0.9972603835,
            0.8796640992, 0.7629971687, 0.2558997318, 0.1896080775, 0.9877646698, 0.7796018768, 0.3618793465,
            0.5658438596, 0.7411996910, 0.0044629453, 0.5836046331, 0.5697132769, 0.0482853292, 0.1630045496,
            0.9986809627, 0.6006669758, 0.1491397202, 0.3941369121, 0.8634036173, 0.1111691826, 0.8095259533,
            0.7889851943, 0.7976543949, 0.4067139891, 0.7236211067, 0.0118146038, 0.2565920075, 0.1886534594,
            0.1625644490, 0.4951283841, 0.1543591922, 0.2295393374, 0.4106006232, 0.3740821919, 0.1829006983,
            0.3997668577, 0.5176780267, 0.6120128234, 0.3901567083, 0.5384221473, 0.1986132992, 0.4292197272,
            0.8564509594, 0.9220216976, 0.0381015975, 0.7036744426, 0.1759125699, 0.1784870876, 0.1802635979,
            0.6691781854, 0.6163473828, 0.1682727669, 0.9763201255, 0.6773539965, 0.5621401946, 0.4464305668,
            0.9702240925, 0.5018658142, 0.9718945689, 0.8711800058, 0.2299712563, 0.7127754446, 0.4449486630,
            0.5335603314, 0.1508773646, 0.6579348621, 0.0437534692, 0.4993554353, 0.4468499724, 0.7940168216,
            0.3046997015, 0.3207686709, 0.7123367945, 0.0592943337, 0.8919226622, 0.0551303000, 0.8933083891,
            0.3076751090, 0.6252239781, 0.0354067268, 0.0789453428, 0.6955946680, 0.1182951348, 0.4508924975,
            0.8822074377, 0.2881390352, 0.1074188003, 0.2181239288, 0.7552704663, 0.5075060468, 0.5449539286,
            0.1274333674, 0.7667131888, 0.6513552590, 0.6590377142
        },
        {4, 4, 3, 3},
        device,
        true
    );
    Tensor x2(
        std::vector<double>{
            0.0852954564, 0.5638234367, 0.2646637438, 0.1003915559, 0.7661793085, 0.6386622625, 0.0701283954,
            0.9221720875, 0.7855236570, 0.6659942469, 0.5833243270, 0.7208499264, 0.3892309243, 0.5183244419,
            0.9113936583, 0.6539964593, 0.3341261736, 0.8554093457, 0.7698793652, 0.3510038211, 0.8680567821,
            0.6852465776, 0.9904393029, 0.2350654336, 0.0206707716, 0.4975797364, 0.0829632232, 0.2841955848,
            0.5928841493, 0.9326344352, 0.4928948705, 0.5977506039, 0.2802381249, 0.7104876558, 0.6406901344,
            0.2061165732, 0.2936327458, 0.7877769710, 0.1641429420, 0.2044854128, 0.2702757202, 0.4022711177,
            0.9759692499, 0.1356347803, 0.2899102995, 0.8633511325, 0.5567461073, 0.7600084412, 0.3232751936,
            0.0746519897, 0.6000315915, 0.4596266605, 0.7451609042, 0.9220767428, 0.8437247545, 0.6852562370,
            0.5579561620, 0.1114592440, 0.6357629860, 0.8283317292, 0.5420369409, 0.7272442550, 0.3964049714,
            0.1711276422, 0.9142196689, 0.3828028272, 0.2141616199, 0.2050173073, 0.9841613323, 0.2842302977,
            0.2932578226, 0.1594795616, 0.3951129458, 0.3340495328, 0.8734566329, 0.9872415160, 0.1548266411,
            0.1885468063, 0.2140843513, 0.3999089648, 0.1824119949, 0.3173162728, 0.9759828965, 0.3597244209,
            0.2149778506, 0.7926840211, 0.0724898880, 0.8629250324, 0.2750570639, 0.5572374876, 0.8987212914,
            0.7558330204, 0.3001163703, 0.4024659228, 0.5835948880, 0.7343396223, 0.1762717948, 0.7052443861,
            0.5924197564, 0.4754887461, 0.1286247752, 0.1302735630, 0.9828385546, 0.3571115517, 0.6482177567,
            0.5392709374, 0.2948816882, 0.0046367790, 0.3861173377, 0.2631030524, 0.8180266464, 0.8491467234,
            0.8901818903, 0.0069961765, 0.0457135244, 0.3181430277, 0.2173360239, 0.4019985500, 0.6478851107,
            0.6760435148, 0.9890789190, 0.9931607172, 0.9832538145, 0.9680281552, 0.9803845942, 0.5653117087,
            0.9100374162, 0.0827367813, 0.5495420544, 0.2956831241, 0.5249294657, 0.2049472295, 0.9415401056,
            0.7668936187, 0.1573723357, 0.5417625895, 0.1055421088, 0.6363988849, 0.4114655367, 0.1090831634,
            0.1342324554, 0.3924816992, 0.7865848470, 0.7023881691
        },
        {4, 4, 3, 3},
        device,
        true
    );

    Tensor expected1(
        std::vector<double>{
            1.9544795104e+00,  9.5083994044e-01,  2.3487910402e-06,  1.7657742677e+00,  7.1050306158e-01,
            1.2697596117e+00,  -1.0746088823e+00, -4.1439758328e-01, 4.6676964020e-01,  -6.8057415085e-01,
            -6.9477333374e-02, -1.0942119177e+00, -4.3176401089e-01, 5.5796451057e-01,  3.8091116398e-02,
            -1.1427352925e-01, -2.3869155952e-01, -9.8790730404e-01, 8.1278383779e-01,  1.2432416174e+00,
            -8.2042672014e-01, 8.5481439995e-01,  -1.1819006407e+00, 3.0527484507e-01,  -7.6419750282e-01,
            4.2916883571e-01,  5.3436565986e-01,  3.9360234056e-01,  6.2028709078e-01,  -1.2299173709e+00,
            8.5085161619e-01,  2.1007100554e-01,  -1.3434464868e+00, -1.4976964166e+00, -3.2271747750e-01,
            1.2354356800e+00,  4.3117130925e-01,  8.2084027077e-02,  1.2885542961e+00,  -3.4985977299e-01,
            -7.1646147832e-01, -1.5995841682e+00, 1.1072547541e+00,  -4.5018942983e-01, 3.0175298725e-01,
            -1.9379764036e-02, 1.4546835684e+00,  -1.5980622764e+00, 1.9512355352e+00,  1.5147329266e+00,
            1.0816799624e+00,  -8.0060190885e-01, -1.0466681871e+00, 1.9159886408e+00,  1.2243041627e+00,
            -2.7618255210e-01, 4.5647135095e-01,  1.0863609937e+00,  -1.5600456976e+00, 5.2026921375e-01,
            4.7037055145e-01,  -1.4026328216e+00, -9.9055386096e-01, 1.5255354891e+00,  1.0313243498e-01,
            -1.5105137392e+00, -6.3495467477e-01, 1.0420878828e+00,  -1.6462110022e+00, 8.4954250399e-01,
            7.7613493730e-01,  8.0711650542e-01,  -2.0157647100e-01, 1.0113157147e+00,  -1.7129668817e+00,
            -7.7613528749e-01, -1.0361551153e+00, -1.1360050555e+00, 1.3681015013e-01,  -1.1674088686e+00,
            -8.7967342332e-01, -2.2637166777e-01, -3.6192348946e-01, -1.0715651347e+00, -2.6658524221e-01,
            1.7108617874e-01,  5.2124507302e-01,  -3.0225690725e-01, 2.4808574415e-01,  -1.0132419373e+00,
            -3.4291489763e-02, 1.5003511057e+00,  1.7358854963e+00,  -1.4392134536e+00, 9.5156784147e-01,
            -9.4418740573e-01, -9.3493956927e-01, -9.2855822782e-01, 8.2765502377e-01,  1.5917031183e-01,
            -1.4421369863e+00, 1.4456234150e+00,  3.7719278481e-01,  -3.4552704398e-02, -4.4807015164e-01,
            1.4238377086e+00,  -2.4995835714e-01, 1.4298075759e+00,  1.5760648975e+00,  -8.7802034888e-01,
            9.6980633208e-01,  -5.5241678766e-02, 2.8389996311e-01,  -1.1807347967e+00, 7.5991608239e-01,
            -1.5907279098e+00, 1.5298825753e-01,  -9.1818645613e-02, 1.1968210101e+00,  -6.1946256224e-01,
            -5.5981657020e-01, 8.9363502836e-01,  -1.5303764050e+00, 1.5602351697e+00,  -1.5458327742e+00,
            1.5653788136e+00,  -4.7088772701e-01, 6.6976862951e-01,  -1.4488936057e+00, -1.2925000429e+00,
            9.2254476123e-01,  -1.1511530102e+00, 4.3558521908e-02,  1.5928700644e+00,  -5.4106258462e-01,
            -1.6596139364e+00, -1.2639813251e+00, 6.5564688002e-01,  -2.2980156804e-01, -9.5972146900e-02,
            -1.5880868486e+00, 6.9654032575e-01,  2.8427975940e-01,  3.1173494466e-01
        },
        {4, 4, 3, 3},
        device,
        true
    );
    Tensor expected2(
        std::vector<double>{
            -1.1106842895, 0.4609155147,  -0.5215961340, -1.0611051050, 1.1255003701,  0.7067040346,  -1.1604965286,
            1.6378177912,  1.1890318155,  0.1458975927,  -0.1632190679, 0.3510121556,  -0.8889667713, -0.4062645125,
            1.0634870457,  0.1010358576,  -1.0950126529, 0.8541523351,  0.8315020210,  -0.6784719248, 1.1854146415,
            0.5264154480,  1.6265824787,  -1.0964097754, -1.8692654798, -0.1500910817, -1.6447119571, -0.5622997531,
            0.5745350406,  1.8257635943,  0.2062956427,  0.5924571653,  -0.5768742420, 1.0076439191,  0.7505943878,
            -0.8498482639, -0.4264550352, 1.1964322352,  -0.8517303767, -0.7192360988, -0.5031650673, -0.0696607595,
            1.8145004794,  -0.9453579662, -0.4386804347, 0.8838480047,  -0.2625994779, 0.4974323932,  -1.1355862826,
            -2.0652300350, -0.1007478111, -0.6257453371, 0.4419149685,  1.1034328860,  1.0977018873,  0.5264502682,
            0.0675554981,  -1.5419887271, 0.3480356521,  1.0422126911,  0.0101694572,  0.6778098168,  -0.5148086244,
            -0.9787051077, 1.7579458989,  -0.1991501032, -0.8202200558, -0.8538966280, 2.0155262749,  -0.5621719128,
            -0.5289254449, -1.0216025286, -0.0931699003, -0.2937166851, 1.4778246415,  1.8515212847,  -0.8823273266,
            -0.7715822769, -0.6877108997, -0.0774186320, -0.7917304580, -1.1578676843, 1.3049970130,  -0.9992965239,
            -1.5405281653, 0.6196118531,  -2.0733144949, 0.8822547449,  -1.3158819359, -0.2607621247, 1.2959548981,
            0.7808673754,  -0.8619123906, -0.4929599422, 0.1599786743,  0.7033873897,  -1.3083506822, 0.5985040916,
            0.1917907998,  0.1421925625,  -1.1352341911, -1.1291620538, 2.0106547639,  -0.2937656454, 0.7783170313,
            0.3770889032,  -0.5229450910, -1.5918557967, -0.1227136186, -0.5267218159, 1.2957793701,  1.3979851114,
            1.5327543684,  -1.3678377644, -1.2406807770, -0.3459574343, -0.6770316326, -0.8412264831, 0.0781845029,
            0.1834734867,  1.3539652317,  1.3692277581,  1.3321841915,  1.2752529042,  1.3214556968,  -0.2305712614,
            1.3367475725,  -1.6455282410, 0.0372240943,  -0.8778934769, -0.0515000342, -1.2049806959, 1.4503093233,
            0.8207389206,  -1.3764799662, 0.3862651319,  -1.2202427767, 0.7347906224,  -0.0935913971, -1.2072018204,
            -1.1145822890, -0.1635048617, 1.2878938041,  0.9778152202
        },
        {4, 4, 3, 3},
        device,
        true
    );
    Tensor expected3(
        std::vector<double>{
            0.9753402753, 0.6867821048, 0.4134051236,  0.9210853005,  0.6176824279,  0.7784752580,  0.1044417665,
            0.2942602733, 0.5476062050, 0.2016936355,  0.3830493123,  0.0789380344,  0.2755332138,  0.5692557153,
            0.4149724846, 0.3697551105, 0.3328314750,  0.1104861371,  0.6293040258,  0.7612310002,  0.1287566139,
            0.6421855792, 0.0179718565, 0.4737623465,  0.1459897802,  0.5117334556,  0.5439742453,  0.6461027609,
            0.7159441920, 0.1458973431, 0.7869809795,  0.5895568702,  0.1109190928,  0.0633947850,  0.4254050685,
            0.9054710914, 0.5373712665, 0.4370045707,  0.7838789507,  0.3128156522,  0.2074133538,  -0.0464947974,
            0.7317532019, 0.2839696968, 0.5001619781,  0.3979168068,  0.8353757260,  -0.0705900277, 0.9827378386,
            0.8531966207, 0.7246791564, 0.1660729046,  0.0930476242,  0.9722775904,  0.7554270370,  0.2955569131,
            0.5201011479, 0.7131501267, -0.0979222813, 0.5396539575,  0.5243609837,  -0.0496782828, 0.0766159394,
            0.9948506630, 0.5566091628, 0.0594457759,  0.3292049814,  0.8459007548,  0.0176375332,  0.7865776429,
            0.7639608170, 0.7735062190, 0.3554488441,  0.7041696006,  -0.0790936600, 0.1902564325,  0.1154976764,
            0.0867896452, 0.4527389741, 0.0777606799,  0.1604880017,  0.3364876589,  0.2962598396,  0.0856589377,
            0.3245534452, 0.4544415325, 0.5583584593,  0.3139671375,  0.4772927533,  0.1029675583,  0.3696918399,
            0.8400300799, 0.9122168099, -0.0608895382, 0.6718386356,  0.0908263602,  0.0936606430,  0.0956164006,
            0.6338617563, 0.5738743980, 0.0805126111,  0.9702298024,  0.6410469869,  0.5141884567,  0.3867839872,
            0.9635176398, 0.4478221084, 0.9653569522,  0.8665416272,  0.1609632800,  0.6922351653,  0.3975218165,
            0.4950290239, 0.0739293190, 0.6318892520,  -0.0439485190, 0.4573903701,  0.3764190637,  0.7588496545,
            0.2198297690, 0.2375309564, 0.6688729154,  -0.0505028390, 0.8667003567,  -0.0550898378, 0.8682268399,
            0.2358835471, 0.5854726337, -0.0638563174, -0.0159247187, 0.6629436235,  0.0273954099,  0.3935513611,
            0.8683853493, 0.2143763121, 0.0135080974,  0.1354022600,  0.7268385212,  0.4540324027,  0.4952651645,
            0.0355455489, 0.7394377665, 0.6124205413,  0.6208794669
        },
        {4, 4, 3, 3},
        device,
        true
    );
    Tensor expected4(
        std::vector<double>{
            0.0017637809,  0.5283301786,  0.1991384733,  0.0183753461,  0.7510001308, 0.6106819167,  -0.0149258695,
            0.9226526967,  0.7722864177,  0.6178230876,  0.5267559066,  0.6782507753, 0.3129473162,  0.4551536078,
            0.8881491342,  0.6046066154,  0.2522452578,  0.8264781717,  0.7447235383, 0.2835840631,  0.8528069132,
            0.6515514259,  0.9875376517,  0.1559476614,  -0.0800791090, 0.4449492743, -0.0115014399, 0.2081518179,
            0.5480397214,  0.9221287731,  0.4379444660,  0.5533980316,  0.2037943752, 0.6775294850,  0.6006774861,
            0.1221813136,  0.2310156125,  0.7747659372,  0.0885265997,  0.1329189663, 0.2053138243,  0.3505599621,
            0.9818504431,  0.0571565637,  0.2269194777,  0.8352266517,  0.4974779836, 0.7213868465,  0.2402920811,
            -0.0335852172, 0.5451602244,  0.3904935538,  0.7050311594,  0.8999173613, 0.8260198196,  0.6515620598,
            0.5114175931,  0.0198697877,  0.5970750121,  0.8090736604,  0.4938921458, 0.6977866076,  0.3335661232,
            0.0836560303,  0.9018528153,  0.3167253537,  0.1310394781,  0.1209709443, 0.9788635248,  0.2081900393,
            0.2181299816,  0.0708306712,  0.3426831963,  0.2754897558,  0.8690468002, 0.9942543083,  0.0782750550,
            0.1153803166,  0.1434815220,  0.3479606776,  0.1086296444,  0.2337278783, 0.9592990744,  0.2804436669,
            0.1209943517,  0.7573814738,  -0.0359669361, 0.8347572701,  0.1871761576, 0.4980192763,  0.8865654267,
            0.7292599378,  0.2275621428,  0.3402386157,  0.5396432291,  0.7055978871, 0.0912218304,  0.6735669841,
            0.5493585138,  0.4187790942,  0.0368573730,  0.0386728048,  0.9774070531, 0.2884374455,  0.6089659298,
            0.4890077899,  0.2199179722,  -0.0996621645, 0.3327845381,  0.1974211075, 0.8080523138,  0.8422964699,
            0.8874510710,  -0.0843957990, -0.0417916980, 0.2579864302,  0.1470596233, 0.3270118233,  0.5978745019,
            0.6288931177,  0.9737253354,  0.9782217455,  0.9673085414,  0.9505363240, 0.9641478779,  0.5069136426,
            0.8990233321,  -0.0117507295, 0.5021545143,  0.2226815885,  0.4750585514, 0.1227905745,  0.9337045968,
            0.7414365342,  0.0704154434,  0.4917512748,  0.0114417276,  0.5959525176, 0.3482850205,  0.0153406787,
            0.0430318248,  0.3273824751,  0.7613178652,  0.6686113784
        },
        {4, 4, 3, 3},
        device,
        true
    );

    nn::BatchNorm2d bn(4);

    bn.train();
    Tensor res1 = bn.forward(x1);
    Tensor res2 = bn.forward(x2);
    CHECK(allclose(res1, expected1));
    CHECK(allclose(res2, expected2));

    bn.eval();
    Tensor res3 = bn.forward(x1);
    Tensor res4 = bn.forward(x2);
    CHECK(allclose(res3, expected3));
    CHECK(allclose(res4, expected4));
}
